#!/usr/bin/env bash

# Script to initialise openwrt for itordvpn
set -o nounset
set -o pipefail
set -o errexit

readonly openvpn=/etc/openvpn
readonly plex=192.168.11.42
_updated=
IP=
declare -a vpns=(nord)

Usage() {

echo >&2 "
  -i|--ip 
  "
}

params="$(getopt -o h:,i: --long ip:,help:,vpns: --name "$0" -- "$@")"
eval set -- "$params"

while true ; do
  case "$1" in
    -i|--ip)    IP="$2"; shift 2 ;;
    -h|--help)  Usage; exit 0 ;;
    --vpns)     iFS=',' read -r -a vpns <<< "$2"; shift 2 ;;
    --)         shift; break ;;
    *)          echo "Not implemented: $1" >&2;
                exit 1 ;;
  esac
done

[[ $# -lt 1 ]] && Usage


install_packages() {
  if [[ -z "${_updated}" ]] ; then
    opkg update
    _updated=true
  fi
  opkg install "${@}" 
}

base_packages() {
  local -a packages
  packages=(
    bash
    jq
    curl
    coreutils-shuf
    sqm-scripts
    luci-app-sqm
  )

  install_packages "${packages[@]}" 
}

# Install openvpn and luci module
openvpn_packages() {
  local -a packages
  packages=(
    openvpn-openssl
    ip-full
    luci-app-openvpn
    bind-dig
    dnsmasq-full
    vpn-policy-routing
    luci-app-vpn-policy-routing
  )
  opkg remove dnsmasq
  [[ -f /etc/config/dhcp ]] && rm /etc/config/dhcp
  install_packages "${packages[@]}" 

  /etc/init.d/openvpn enable
}

nordvpn() {
  /root/nordvpnserver # This downloads a full config

  cat <<! >$openvpn/nord.conf
auth-user-pass '/etc/openvpn/nord.auth'
config  "${openvpn}/fastest.server"
!

  uci del openvpn.nord || true
  uci set openvpn.nord=openvpn
  uci set openvpn.nord.enabled='1'
  uci set openvpn.nord.config="${openvpn}/nord.conf"
  uci commit openvpn

  network_nordvpn

# TODO set up cron for server refresh
}

privatvpn() {
# TODO complete config
# TODO download from privat?

  install_packages unzip

  wget 'http://privatevpn.com/client/PrivateVPN-TUN.zip' -O $openvpn/PrivateVPN-TUN.zip
  unzip $openvpn/PrivateVPN-TUN.zip -d $openvpn/ || true

cat <<! >$openvpn/privat.conf
remote uk-lon.pvdata.host 1195 udp
auth-user-pass '/etc/openvpn/privat.auth'
up ''
down ''
config  "${openvpn}/PrivateVPN-TUN/UDP/PrivateVPN-UK-London 1-TUN-1194.ovpn"
!

  uci del openvpn.privat || true
  uci set openvpn.privat=openvpn
  uci set openvpn.privat.config="$openvpn/privat.conf"
  uci set openvpn.privat.enabled='1'

  uci commit openvpn

  network_privatvpn
}

network_base() {
  if [[ $IP ]] ; then
    uci set network.lan=interface
    uci set network.lan.ifname='eth0'
    uci set network.lan.proto='static'
    uci set network.lan.netmask='255.255.255.0'
    uci set network.lan.ip6assign='60'
    uci set network.lan.ipaddr=$IP
  else
    uci set network.lan=interface
    uci set network.lan.ifname='eth0'
    uci set network.lan.proto='dhcp'
  fi

  uci set network.wan=interface
  uci set network.wan.ifname='eth1'
  uci set network.wan.proto='dhcp'

# configure the DNS servers:
  uci set network.wan.peerdns='0'
  uci del network.wan.dns || true
# TODO what should DNS be for privat
  uci add_list network.wan.dns='103.86.96.100'
  uci add_list network.wan.dns='103.86.99.100'

  uci set 'network.lan.ipv6=off'
  uci set 'network.wan.ipv6=off'

  uci commit network

  uci set dhcp.@dnsmasq[0].domain='theclarkhome.com'
  uci set dhcp.@dnsmasq[0].local='/theclarkhome.com/192.168.11.21'
  uci set dhcp.@dnsmasq[0].boguspriv='0'
  uci del dhcp.@dnsmasq[0].server || true
  uci add_list dhcp.@dnsmasq[0].server='/theclarkhome.com/192.168.11.22'
  uci add_list dhcp.@dnsmasq[0].server='103.86.96.100'
  uci add_list dhcp.@dnsmasq[0].server='103.86.99.100'
  #uci set dhcp.@dnsmasq[0].cachesize='0'
  uci del dhcp.@dnsmasq[0].rebind_domain || true
  uci add_list dhcp.@dnsmasq[0].rebind_domain='theclarkhome.com'
  #uci add_list dhcp.@dnsmasq[0].rebind_domain='bbc.co.uk'
  uci add_list dhcp.@dnsmasq[0].rebind_domain='plex.direct'

  uci set dhcp.lan.ignore='1'
  uci set dhcp.wan.ignore='1'

  uci set 'dhcp.lan.dhcpv6=disabled'
  /etc/init.d/odhcpd disable

  uci commit dhcp
  /etc/init.d/dnsmasq restart

  sleep 15
}

network_sqm() {
  WAN_NAME=$1
  WAN_IFACE=$(uci get "network.${WAN_NAME}.ifname")
  BW_DOWN='110'
  BW_UP='9'

  uci del sqm.eth1 || true
  uci del sqm."${WAN_NAME}" || true

  uci set sqm."${WAN_NAME}"='queue'
  uci set sqm."${WAN_NAME}".interface="$WAN_IFACE"
  uci set sqm."${WAN_NAME}".download=$((BW_DOWN*1000*85/100))
  uci set sqm."${WAN_NAME}".upload=$((BW_UP*1000*85/100))
  uci set sqm."${WAN_NAME}".qdisc='cake'
  uci set sqm."${WAN_NAME}".script='piece_of_cake.qos'
  uci set sqm."${WAN_NAME}".linklayer='ethernet'
  uci set sqm."${WAN_NAME}".overhead='44'
  uci set sqm."${WAN_NAME}".qdisc_advanced='0' # Default '0'
  uci set sqm."${WAN_NAME}".debug_logging='1'
  uci set sqm."${WAN_NAME}".verbosity='5'
  uci set sqm."${WAN_NAME}".enabled='1'

  uci commit sqm

  /etc/init.d/sqm restart
}

network_wan() {
  network_sqm wan
}

network_nordvpn() {
  uci set network.nordvpntun=interface
  uci set network.nordvpntun.proto='none'
  uci set network.nordvpntun.ifname='tun0'

  uci commit network

  network_sqm nordvpntun
}

network_privatvpn() {
  uci set network.privatvpntun=interface
  uci set network.privatvpntun.proto='none'
  uci set network.privatvpntun.ifname='tun0'

  uci commit network

  network_sqm privatvpntun
}

# Create a new firewall zone and add a forwarding rule from LAN to VPN:
vpn_firewall() {
  uci add firewall zone
  uci set firewall.@zone[-1].name='vpnfirewall'
  uci set firewall.@zone[-1].input='REJECT'
  uci set firewall.@zone[-1].output='ACCEPT'
  uci set firewall.@zone[-1].forward='REJECT'
  uci set firewall.@zone[-1].masq='1'
  uci set firewall.@zone[-1].mtu_fix='1'
  uci add_list firewall.@zone[-1].network='nordvpntun'
  echo TODO uci add_list firewall.@zone[-1].network='privatvpntun'
  uci add firewall forwarding
  uci set firewall.@forwarding[-1].src='lan'
  uci set firewall.@forwarding[-1].dest='vpnfirewall'

  uci add firewall redirect
  uci set firewall.@redirect[-1].dest_port='32400'
  uci set firewall.@redirect[-1].src='wan'
  uci set firewall.@redirect[-1].name='Plex_32400'
  uci set firewall.@redirect[-1].src_dport='32401'
  uci set firewall.@redirect[-1].target='DNAT'
  uci set firewall.@redirect[-1].dest=$plex

  uci commit firewall
}


vpn-policy-routing () {

  uci set vpn-policy-routing.@include[-1]=include
  uci set vpn-policy-routing.@include[-1].path='/etc/vpn-policy-routing.aws.user'
  uci set vpn-policy-routing.@include[-1]=include
  uci set vpn-policy-routing.@include[-1].path='/etc/vpn-policy-routing.netflix.user'
  uci set vpn-policy-routing.@include[-1]=include
  uci set vpn-policy-routing.@include[-1].enabled='0'
  uci set vpn-policy-routing.@include[-1].path='/etc/vpn-policy-routing.bbc.user'
  uci set vpn-policy-routing.@include[-1]=include
  uci set vpn-policy-routing.@include[-1].enabled='1'
  uci set vpn-policy-routing.@include[-1].path='/etc/vpn-policy-routing.plex.user'
  uci set vpn-policy-routing.config=vpn-policy-routing
  uci set vpn-policy-routing.config.verbosity='2'
  uci set vpn-policy-routing.config.strict_enforcement='1'
  uci set vpn-policy-routing.config.src_ipset='0'
  uci set vpn-policy-routing.config.dest_ipset='dnsmasq.ipset'
  uci set vpn-policy-routing.config.ipv6_enabled='0'
  uci set vpn-policy-routing.config.supported_interface=''
  uci set vpn-policy-routing.config.ignored_interface='vpnserver wgserver'
  uci set vpn-policy-routing.config.boot_timeout='30'
  uci set vpn-policy-routing.config.iptables_rule_option='append'
  uci set vpn-policy-routing.config.iprule_enabled='0'
  uci set vpn-policy-routing.config.webui_enable_column='0'
  uci set vpn-policy-routing.config.webui_protocol_column='0'
  uci set vpn-policy-routing.config.webui_chain_column='0'
  uci set vpn-policy-routing.config.webui_sorting='1'
  uci set vpn-policy-routing.config.webui_supported_protocol="'tcp' 'udp' 'tcp udp' 'icmp' 'all'"
  uci set vpn-policy-routing.config.enabled='1'

  uci commit vpn-policy-routing
}

vpn_prevent_leak() {
cat > "/etc/firewall.user" <<!
# This file is interpreted as a shell script.
# Put your custom iptables rules here, and they will be executed with each firewall (re-)start
# Internal uci firewall chains are flushed and recreated on reload, so
# put custom rules into the root chains, e.g. INPUT or FORWARD, or into the
# special user chains, e.g. input_wan_rule or postrouting_lan_rule.

if (! ip a s tun0 up) && (! iptables -C forwarding_rule -j REJECT); then
       iptables -I forwarding_rule -j REJECT
fi
!

cat > "/etc/hotplug.d/iface/99-prevent-leak" <<!
#!/bin/sh
if [ "\$ACTION" = ifup ] && (ip a s tun0 up) && (iptables -C forwarding_rule -j REJECT); then
       iptables -D forwarding_rule -j REJECT
fi
if [ "\$ACTION" = ifdown ] && (! ip a s tun0 up) && (! iptables -C forwarding_rule -j REJECT); then
       iptables -I forwarding_rule -j REJECT
fi
!
}

upnpd() {
  install_packages upnpd
}

snmpd() {
  install_packages snmpd
  uci set snmpd.@system[0]=system
  uci set snmpd.@system[0].sysLocation='undisclosed'
  uci set snmpd.@system[0].sysContact='OpenWRT router <openwrt@openwrt.org>'
  uci set snmpd.@system[0].sysName="$(cat /proc/sys/kernel/hostname)"
}

full_install() {
  network_base
  base_packages
  snmpd
  network_wan

  openvpn_packages

  for vpn in "${vpns[@]}"; do
    ${vpn}vpn
  done

  vpn_firewall
  vpn_prevent_leak
  vpn-policy-routing

  /etc/init.d/openvpn start
}

commands=("$@")
if [[ ${#commands[@]} = 0 ]] ; then
  full_install
else
  for command in "${commands[@]}"; do
    $command
  done
fi
