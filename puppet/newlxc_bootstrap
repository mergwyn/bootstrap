#!/bin/bash
set -o nounset
set -o pipefail
#set -o errexit

. /etc/lsb-release
ARCH=amd64
BOOT=1
domain=theclarkhome.com
ENVIRONMENT=production
GUESTS=
GPU=no
host=$(hostname)
IP=
MAC=
NESTING=no
NETPLAN=disable_netplan
NFS=no
OSVERSION=${DISTRIB_CODENAME}
PRIVMODE=no
PUPPET=agent
RAW=
ROLE=
SIZE=20GB

declare -A _mountconfig
_mountconfig["home"]="disk path=/home source=/home recursive=true"
_mountconfig["media"]="disk path=/srv/media source=/srv/media"
_mountconfig["public"]="disk path=/srv/public source=/srv/public"
_mountconfig["src"]="disk path=/usr/src source=/usr/src"
_mountconfig["net"]="disk path=/net source=/net"

#bold() { echo echo -e "\e[32m$*\e[0m"; }
bold() { echo "$(tput smso)$*$(tput rmso)"; }

case $host in
foxtrot)  POOL=array
          puppetmaster=echo
          ;;
*)        POOL=default
          puppetmaster=foxtrot:echo
          ;;
esac

Usage()
{
  cat <<EOF >&2
$0: <flags> guests
Allowed flags are:
--arch=<arch> 			architecture [default = amd64]
--boot=<1|0> 			autostart container at boot [default = 1]
--environment=<environment> 	environment to use [default=production]
--gpu                           add gpu
--mounts                        List of comma separated mounts to add valid: ${!_mountconfig[@]}
--mac=<address>                 mac address
--nesting=<yes|no>		enable security nesting (for nested lxd) [default = no]
--nfs    		        allow nfs mounts
--privileged    		run guest in privileged mode 
--puppet=<master|agent|no>	bootstrap puppet [default = agent]
--raw=<value for raw.lxc>
--role=<role
--size=<value>			root disk size [default = 20GB]
--static=<ip>value>		static IP for interface
EOF
  exit 1
}

params="$(getopt -o a:p: --long arch:,boot:,environment:,gpu,mac:,mounts:,nesting:,nfs,privileged,puppet:,raw:,role:,size:,static:,version: --name "$0" -- "$@")"
eval set -- "$params"

while true
do
  case "$1" in
    -a|--arch)	        ARCH=$2; shift 2 ;;
    --boot)		BOOT=$2; shift 2 ;;
    --environment)	ENVIRONMENT=$2; shift 2 ;;
    --mounts)	        IFS=',' read -r -a MOUNTS <<< "$2"; shift 2 ;;
    --mac)	        MAC=$2; shift 2 ;;
    --nesting)	        NESTING=$2; shift 2 ;;
    --gpu)      	GPU=yes; shift ;;
    --nfs)      	NFS=yes; shift ;;
    --privileged)	PRIVMODE=yes; shift ;;
    -p|--puppet)	PUPPET=$2; shift 2 ;;
    --size)		SIZE=$2; shift 2 ;;
    --raw)		RAW=$2; shift 2 ;;
    --role)		ROLE=$2; shift 2 ;;
    --static)	        IP=$2; shift 2 ;;
    --version)	        OSVERSION=$2; shift 2 ;;
    --)		        shift; break ;;
    *)		        echo "Not implemented: $1" >&2;
                        exit 1 ;;
  esac
done

[[ $# -lt 1 ]] && Usage

GUESTS=($@)

for guest in "${GUESTS[@]}"
do
  echo "Create ${guest} with flags: ROLE=${ROLE}, ARCH=${ARCH}, PUPPET=${PUPPET}, NESTING=${NESTING} nfs=${NFS} privileged=${PRIVMODE} SIZE=${SIZE} IP=${IP} BOOT=${BOOT} ENVIRONMENT=${ENVIRONMENT} OSVERSION=${OSVERSION} POOL=${POOL} MOUNTS=${MOUNTS[*]}"

  VERSION=images:ubuntu/${OSVERSION}/cloud/${ARCH}
  lxc init "${VERSION}" "${guest}" || true

  sleep 2

  if [[ "${NFS}" = "yes" ]] 
  then
    PRIVMODE=yes
    lxc config set ${guest} raw.apparmor "mount fstype=nfs,"
  fi

  setconfig() { lxc config set "${guest}" "$@" ; }

  [[ "${PRIVMODE}" = "yes" ]] && setconfig security.privileged true
  [[ "${NESTING}" = "yes" ]] && setconfig security.nesting true
  [[ "${RAW}" ]] && setconfig raw.lxc "${RAW}"
  [[ "${MAC}" ]] && setconfig volatile.eth0.hwaddr "${MAC}"
  setconfig boot.autostart "${BOOT}"

  adddevice() { lxc config device add "${guest}" "$@" ; }

  adddevice root disk path=/ pool=${POOL} size="${SIZE}"
  [[ "${GPU}" = "yes" ]] && adddevice gpu gpu gid=44

  for MOUNT in "${MOUNTS[@]}"
  do
    adddevice "${MOUNT}" "${_mountconfig[${MOUNT}]}"
  done

  # Now set cloud-init to install puppet agent
  lxc config set "${guest}" user.user-data - <<!
#cloud-config
apt:
  sources:
    puppet6:
      source: "deb http://apt.puppetlabs.com ${OSVERSION} puppet6"
      keyid: 7F438280EF8D349F
      keyserver: "https://apt.puppetlabs.com/DEB-GPG-KEY-puppet"

package_update: true
package_upgrade: true

puppet:
  package_name: puppet-agent
  conf_file: '/etc/puppetlabs/puppet/puppet.conf'
  ssl_dir: '/etc/puppetlabs/puppet/ssl'
  csr_attributes_path: '/etc/puppetlabs/puppet/csr_attributes.yaml'
  conf:
    agent:
      server: "${puppetmaster}.${domain}"
      environment: ${ENVIRONMENT}
  csr_attributes:
    extension_requests:
      pp_role: "${ROLE}"

packages:
  - openssh-server
power_state:
  delay: now
  mode: reboot
  message: Rebooting....
  timeout: 30
  condition: True
!
  lxc config show "${guest}"

  if [ "${IP}" != "" ]
  then
    lxc config set "${guest}" user.network-config - <<!
#cloud-config
network:
  version: 2
  ethernets:
    eth0:
      addressses: [ "${IP}"/24 ]
      gateway4: $(grep  gateway /etc/network/interfaces)
      nameservers:
        search: $(grep	dns-search /etc/network/interfaces)
        addresses: [ $(grep  dns-nameservers /etc/network/interfaces) ]
!
    sleep 2
  fi
  bold "Cleaning puppet cert"
  lxc exec ${puppetmaster} --env LANG="${LANG}" -- "$(dirname "$(which puppet)")"/puppetserver ca clean --certname  ${guest}.${domain}
  bold "Starting ${guest}"
  lxc start ${guest}
  sleep 1
  lxc exec "${guest}" -- cloud-init status --wait --long

  case "${PUPPET}" in
  "agent")
    ;;
  "master")
    bold "Setting up puppet"
    lxc file push "$(dirname "$0")"/puppetmaster_bootstrap ${guest}///tmp/
    lxc exec ${guest} -- bash /tmp/puppetmaster_bootstrap
    if [[ ${NETPLAN} ]]
    then 
      lxc exec ${guest} -- apt -y install ifupdown net-tools
    fi
    ;;
  *)
    # allow time for dhcp and dns to catchup
    sleep 10
  esac

done
